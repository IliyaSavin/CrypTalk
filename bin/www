#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('shopping-cart:server');
var http = require('http');
const CryptoJS = require("crypto-js");
const Content = require("../models/content");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io").listen(server);




io.on('connection', function(socket){
  socket.on('enter chat', function(id) {
    Content.Key.findOne({_id: id}, function(err, result) {
      //console.log(result);
      if(err) {
        console.log(err);
      } else if (result != null) {
        socket.join(result.chatID.toString());
        console.log("new connection");
      }
    })
  })
  socket.on('new message', function(messageInfo) {
    Content.Key.findOne({_id: messageInfo.id}, function(err, result) {
      if (result != null) {
        const message = new Content.Message({
          ownerID: messageInfo.id, 
          chatID: result.chatID,
          text: messageInfo.message,
          time: messageInfo.time
        })
        message.save()
        .then(function(doc) {
          console.log(doc);
          io.sockets.in(doc.chatID.toString()).emit('get message', {text: doc.text, name: result.name, time: doc.time});
        })
      }
      })
    })
});

app.post("/enterChat", function(req, res) {
  Content.Key.findOne({userKey: req.body.key}, function(err, result) {
      if(err){
          console.log(err);
      } else if (result != null) {
        Content.Message.find({chatID: result.chatID}).
        populate('ownerID').
        exec(function(err, message) {
          //console.log(message);
          if (err) {
            console.log(err);
          } else {
            //console.log(message);
            Content.Chat.findOne({ownerID: result._id}, function(err, chat) {
              if (chat != undefined) {
                res.render("partials/chat.hbs", {
                  id: result._id,
                  isOwner: true,
                  messages: message.reverse()
                });
              } else {
                res.render("partials/chat.hbs", {
                  id: result._id,
                  isOwner: false,
                  messages: message.reverse()
                });
              }
            })
          }
        })
      }
  })
});

app.post("/delete", function(req, res) {
  console.log(req.body.id);
  Content.Chat.findOne({ownerID: req.body.id}, function(err, chat) {
    if (err) {
      console.log(err);
    } else if (chat != null) {
      console.log("deleted");
      io.sockets.in(chat._id.toString()).emit('delete');
      Content.Key.deleteMany({chatID: chat._id}, function(err) {
        if (err) console.log(err);
      });
      Content.Message.deleteMany({chatID: chat._id}, function(err) {
        if (err) console.log(err);
      });
      Content.Chat.deleteOne({_id: chat._id}, function(err) {
        if (err) console.log(err);
      });
    }
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
