#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('shopping-cart:server');
var http = require('http');
const Content = require("../models/content");
const CryptoJS = require("crypto-js");
const path = require('path');
const fs = require("fs");

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
var io = require("socket.io").listen(server);

io.on('connection', function(socket){
  socket.on('enter chat', function(id) {
    socket.join(id);
    console.log("new connection");
  })
  socket.on('new message', function(messageInfo) {
    if (!messageInfo.message) console.log("message empty");
    Content.Key.findOne({_id: messageInfo.id}, function(err, result) {
      if (result != null) {
        Content.Encript.findOne({chatID: result.chatID}, function(err, encript) {
          fs.readFile("./data/" + encript.encription + ".txt", function(err, buff) {
            if (err) {
              console.log(err);
            }
            const message = new Content.Message({
              ownerID: messageInfo.id, 
              chatID: result.chatID,
              text: CryptoJS.AES.encrypt(messageInfo.message, buff.toString()).toString(),
              time: messageInfo.time
            })
            message.save()
            .then(function(doc) {
              let time = new Date(doc.time);
              let minutes = time.getMinutes();
              let hours = time.getHours();
              if (hours.toString().length == 1) {
                hours = '0' + hours;
              }
              if (minutes.toString().length == 1) {
                minutes = '0' + minutes;
              }
              doc.time = hours + ":" + minutes;
              io.sockets.in(doc.chatID.toString()).emit("last message", {
                id: doc._id
              })
              Content.Chat.updateOne({_id: doc.chatID}, {"lastMessage": doc._id}, function(err, chat) {
                if(err) {
                  console.log(err);
                }
              })
              io.sockets.in(doc.chatID.toString()).emit('get message', {
                text: CryptoJS.AES.decrypt(doc.text, buff.toString()).toString(CryptoJS.enc.Utf8),
                name: result.name,
                time: doc.time,
                color: result.color
              });
          })
          })
        })
      }
      })
    })
});

app.post("/enter", function(req, res) {
  console.log(req.body);
  Content.Key.findOne({userKey: req.body.key}, function(err, result) {
    Content.Message.find({chatID: result.chatID}).
    populate('ownerID').
    exec(function(err, message) {
      if (err) {
        console.log(err);
      } else {
        Content.Encript.findOne({chatID: result.chatID}, function(err, encript) {
          fs.readFile("./data/" + encript.encription + ".txt", function(err, buff) {
            message.forEach(function(message) {
              let time = new Date(message.time);
              let minutes = time.getMinutes();
              let hours = time.getHours();
              if (hours.toString().length == 1) {
                hours = '0' + hours;
              }
              if (minutes.toString().length == 1) {
                minutes = '0' + minutes;
              }
              message.time = hours + ":" + minutes;
              message.text = CryptoJS.AES.decrypt(message.text, buff.toString()).toString(CryptoJS.enc.Utf8);
              message.text = message.text.replace(/&lt/g, '<');
              message.text = message.text.replace(/&gt/g, '>');
              if (message.ownerID._id.toString() == result._id.toString()) {
                message.isOwn = true;
              } else {
                message.isOwn = false;
              }
              })
              Content.Chat.findOne({ownerID: result._id}, function(err, chat) {
                
                if (chat != undefined) {
                  Content.Key.find({chatID: result.chatID, deleted: false}, function(err, users) {
                    res.render("partials/chat.hbs", {
                      id: result._id,
                      isOwner: true,
                      messages: message.reverse(),
                      users: users
                    });
                  })
                  
                } else {
                  res.render("partials/chat.hbs", {
                  id: result._id,
                  isOwner: false,
                  messages: message.reverse()
                });
              }
              })
          })
        })
      }
    })
  })
})

app.post("/delete", function(req, res) {
  console.log(req.body.id);
  Content.Chat.findOne({ownerID: req.body.id}, function(err, chat) {
    if (err) {
      console.log(err);
    } else if (chat != null) {
      console.log("deleted");
      io.sockets.in(chat._id.toString()).emit('delete');
      Content.Key.deleteMany({chatID: chat._id}, function(err) {
        if (err) console.log(err);
      });
      Content.Message.deleteMany({chatID: chat._id}, function(err) {
        if (err) console.log(err);
      });
      Content.Chat.deleteOne({_id: chat._id}, function(err) {
        if (err) console.log(err);
      });
      Content.Encript.findOne({chatID: chat._id}, function(err, encript) {
        fs.unlink("./data/" + encript.encription + ".txt", function(err) {
          Content.Encript.deleteOne({chatID: chat._id}, function(err) {
            if (err) console.log(err);
          })
        })
      })
    }
  })
})

app.post("/deleteUser", function(req, res) {
  Content.Key.findOneAndUpdate({_id: req.body.id}, {"deleted" : true}, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      io.sockets.in(result.chatID.toString()).emit('deleteCheck', {
        id: req.body.id
      });
      res.send(true);
    }
  })
})

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
